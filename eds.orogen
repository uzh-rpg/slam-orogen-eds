name "eds"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "edsTypes.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
using_library "eds" # Event-based Direct Sparse Odometry
using_library "yaml-cpp" # yaml
using_library "frame_helper" # Image Frames

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "std"
import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the eds namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #*************************
    #****Task Properties *****
    #*************************
    property "config_file", "std::string"
        doc "Yaml file for EDS configuration"

    property "calib_file", "std::string"
        doc "Camera calibration file"

    #*****************************
    #******* Input Ports *********
    #*****************************
    input_port('events', 'base::samples::EventArray').
        doc 'array of events'

    input_port('frame', ro_ptr('base::samples::frame::Frame')).
        doc 'RGB Image frame'

    input_port('imu', 'base::samples::IMUSensors').
        doc 'Inertial measurements'

    input_port('depthmap', ro_ptr('base::samples::DistanceImage')).
    #input_port('depthmap', ro_ptr('base::samples::frame::Frame')).
        doc 'Depth map (optional for debug)'

    input_port('groundtruth', 'base::samples::RigidBodyState').
        doc 'Ground truth camera pose w.r.t world (optional for debug)'


    #************************
    # aggregator parameters
    #************************
    stream_aligner do
        align_port('events', 0)
        align_port('frame', 0)
        align_port('imu', 0)
        align_port('groundtruth', 0)
        max_latency(0.05)
    end

    #******************************
    #******* Output Ports *********
    #******************************

    ####### Frames #########
    output_port('event_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Events image frame'

    output_port('residuals_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Residuals image frame'

    output_port('of_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Optical flow frame'

    output_port('model_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Bightness Model Image'

    output_port('mag_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Gradient Magnitude'

    output_port('grad_x_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Gradient along x'

    output_port('grad_y_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Gradient along y'

    output_port('inv_depth_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Inverse depth frame'

    output_port('sigma_depth_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Sigma frame for inverse depth'

    output_port('converge_depth_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Converge points frame for inverse depth'

    output_port('keyframes_frame', ro_ptr('base::samples::frame::Frame')).
        doc 'Mosaic of all Keyframes with the inverse depth of active points'

    ####### Poses #########
    output_port('pose_w_kfs', 'eds::VectorKFs').
        doc 'Sliding window of keyframe poses w.r.t world (T_w_kf[i])'

    output_port('pose_w_ef', '/base/samples/RigidBodyState').
        doc 'Camera egomotion eventframe w.r.t world (T_w_ef)'

    output_port('pose_w_gt', '/base/samples/RigidBodyState').
        doc 'Ground truth camera egomotion w.r.t world (T_w_gt)'

    ####### Maps #########
    output_port('local_map', '/base/samples/Pointcloud').
        doc 'Local map in the current key frame'

    output_port('global_map', '/base/samples/Pointcloud').
        doc 'Global map in the world frame'

    ####### Infos #########
    output_port('tracker_info', 'eds::TrackerInfo').
        doc 'Tracker information'

    output_port('bundles_info', 'eds::PBAInfo').
        doc 'Bundle Adjustement information'

    runtime_states :INITIALIZING, :OPTIMIZING, :LOGGING

    port_driven

end

